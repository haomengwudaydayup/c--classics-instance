#include<iostream>
#include<memory>

using namespace std;

template<class T>
class Shared_ptr {
public:
	Shared_ptr(T* ptr = nullptr)
		:_ptr(ptr)
		, _count(new int(1))
	{
		//初始化对象的资源是唯一的，因此可以这样赋值。
	}

	Shared_ptr(const Shared_ptr& ptr){
		_count = ptr._count;	//先让_count计数器指向同一块资源
		++(*_count);	//计数器加加
		_ptr = ptr._ptr;
	}

	Shared_ptr& operator=(const Shared_ptr& ptr) {
		if (this != &ptr && _ptr != ptr._ptr) {	//自己赋给自己无意义， 后续操作都是无意义的， 不需要这样做。
			(*_count)--;
			if (0 == (*_count)) {
				if (_ptr) {
					delete _ptr;
					delete _count;
				}
			}

			_count = ptr._count;
			++(*_count);
			_ptr = ptr._ptr;
		}
		return *this;
	}

	~Shared_ptr() {
		(*_count)--;	//先减减_count, 然后再判断。

		if (0 == (*_count)) {
			if (_ptr) {
				delete _ptr;
				delete _count;
			}
		}
	}

private:
	int* _count;
	T* _ptr;

};

void test() {
	Shared_ptr<int> sp(new int(2));
	Shared_ptr<int> sp1(sp);
	sp1 = sp;

	Shared_ptr<int> test(new int(4));
	test = sp;
}


int main() {
	test();
	return 0;
}
